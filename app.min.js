const{Gateway:Gateway,Wallets:Wallets}=require("fabric-network"),FabricCAServices=require("fabric-ca-client"),path=require("path"),CAUtil=require("./lib/CAUtil.js"),AppUtil=require("./lib/AppUtil.js"),{buildCAClient:buildCAClient,registerAndEnrollUser:registerAndEnrollUser,enrollAdmin:enrollAdmin}=require("./lib/CAUtil.js"),{buildCCPOrg1:buildCCPOrg1,buildWallet:buildWallet}=require("./lib/AppUtil.js"),caname="actorfsmmodelca",orgname="Org1MSP",actorname="mainchainonly",adminname="admin",admindisplayname="actorfsmmodel Admin",adminUserId="admin",adminUserPasswd="adminpw",walletPath=path.join(__dirname,"actorfsmmodel"),channelName="mychannel",chaincodeName="basic",mspOrg1="Org1MSP",org1UserId="appUser",http=require("http"),url=require("url"),host="0.0.0.0",port=8e3;let completeProfile="";function prettyJSONString(inputString){return JSON.stringify(JSON.parse(inputString),null,2)}let identity="actorfsmmodel Admin",networkConnections={},gateway=null,network=null,contract=null;async function initializeHyperledgerNetowrk(){try{const ccp=AppUtil.buildJunglekidsOrg1(),wallet=await buildWallet(Wallets,walletPath);null==gateway&&(gateway=new Gateway),null==network&&(console.log("Build a network instance"),await gateway.connect(ccp,{wallet:wallet,identity:identity,discovery:{enabled:!0,asLocalhost:!1}}))}catch(error){console.error(`******** getHyperledgerGateway: ${error}`)}}async function initializeHyperledgerContract(actorname){try{return console.log("Build a network instance based on the channel where the smart contract is deployed"),network=await gateway.getNetwork(actorname),console.log("Get the contract from the network.",network),contract=network.getContract(actorname),console.log("\n--\x3e Submit Transaction: InitLedger, function creates the initial set of assets on the ledger"),await contract.submitTransaction("InitLedger",actorname),console.log("*** Result: committed"),networkConnections[actorname]=contract,contract}catch(error){console.error(`******** getHyperledgerGateway: ${error}`)}}function shutdownHyperledgerContract(actorname){networkConnections[actorname]=null}async function getActorConnection(actor){return networkConnections[actor]||await initializeHyperledgerContract(actor),networkConnections[actor]}async function deleteAsset(actor,id){console.log('\n--\x3e Evaluate Transaction: DeleteAsset, function returns "true" if an asset with given assetID exist');let contract=await getActorConnection(actor),result=await contract.submitTransaction("DeleteAsset",id);return console.log(`*** Result: ${prettyJSONString(result.toString())}`),result}async function createOrUpdateGloableAsset(actor,id,newstate){console.log("\n--\x3e Submit Transaction:     async CreateOrUpdateGloableAsset(ctx, txid, activestate) {\t\t\t\t\t");let contract=await getActorConnection(actor),result=await contract.submitTransaction("CreateOrUpdateGloableAsset",id,newstate);return console.log("*** Result: CreateOrUpdateGloableAsset"),""!==`${result}`&&console.log(`*** Result: ${prettyJSONString(result.toString())}`),result}async function getAllAssets(actor){console.log("\n--\x3e Evaluate Transaction: GetAllAssets, function returns all the current assets on the ledger");let contract=await getActorConnection(actor),result;return console.log("get "+actor+" contract",contract),await contract.evaluateTransaction("GetAllAssets")}async function readAsset(actor,id){console.log('\n--\x3e Evaluate Transaction: ReadAsset, function returns "asset1" attributes');let contract=await getActorConnection(actor),result=await contract.evaluateTransaction("ReadAsset",id);return console.log(`*** Result: ${prettyJSONString(result.toString())}`),result}const requestListener=async function(req,res){const queryObject=url.parse(req.url,!0).query;if(!queryObject||!queryObject.username||!queryObject.password)return res.writeHead(400),void res.end("{error: no username or passowrd}");if("admin"!=queryObject.username||"adminpw"!=queryObject.password)return res.writeHead(400),void res.end("{error: username or passowrd is not correct.}");if(!queryObject.actor)return res.writeHead(400),void res.end("{error: actor is not specified.}");console.log("req.url:",req.url);let result="",id="",txid="",newstate="",actor=queryObject.actor;res.setHeader("Content-Type","application/json"),req.url.startsWith("/read")?(id=queryObject.id,result=await readAsset(actor,id),res.writeHead(200),res.end(result)):req.url.startsWith("/update")?(newstate=queryObject.newstate,txid=queryObject.txid,result=await createOrUpdateGloableAsset(actor,txid,newstate),res.writeHead(200),res.end(result)):req.url.startsWith("/delete")?(id=queryObject.id,result=await deleteAsset(actor,id),res.writeHead(200),res.end(result)):(res.writeHead(200),result=await getAllAssets(actor),res.end(result))},server=http.createServer(requestListener);server.listen(8e3,host,async()=>{await initializeHyperledgerNetowrk(),await initializeHyperledgerContract("seller"),await initializeHyperledgerContract("buyer"),await initializeHyperledgerContract("shippingcompany"),await initializeHyperledgerContract("partial"),await initializeHyperledgerContract("mainchainonly"),console.log("Server is running on http://0.0.0.0:8000")});